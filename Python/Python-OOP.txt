Quick start: https://www.youtube.com/watch?v=JeznW_7DlB0

Before we start, a few terminology first shall we?
--------------------------------------------------------------------------------------------------------------------------
Object: A collection of data (variables) and methods (functions) that act on those data.
        Dr Chuck: "A bit of self-contained Code and Data."
        (i.e. String Objects, Integer Objects, Floating Point Objects, Dictionary Objects, List Objects...)
        Basically, OBJECT = TYPE

Class: A template, shape of an object, a cookie cutter...XD (i.e. Class Strings)

Method or Message: A defined capability of a class. (i.e. String.uppercase())

Field or Attribute: A bit of hidden data in a class, most likely set by the developer, not you. Something like the 'invinsible counter' in the iter.next() method.
Variable          : A value you set for the class object. Something like what you always do: var1 = int(123)
                    *Notice the diff between Attr & Var.

Object or Instance: A particular instance of a class or the actual object created at runtime.

Inheritance: The ability to extend a class to make a new class or subclass.

'self' : a term/name in which allow an object to refer to itself when the method (def) is called.
         If the method is to use some value of the obj, then it should be self.value

[]    class new_class(old_class):
[]        def __init__(self, value1):
[]            self.value = value1
[]        def thatfunc(self, random_args):
[]            #do something with self.value
[]
[]         #See self.name self.x as
[]         #     我 的name  我 的x

 ====NOTE ABOUT SELF====
 *Can be any other var name other than 'self', just that the first param of the class' func
  refers to its own instance & it's other attribues or values during runtime.
 *Can be different names in each def func() of the same class, just that the whole func() has
  to use the same name.

--------------------------------------------------------------------------------------------------------------------------
So, what exactly is an object? Well think of the Strings, Integers, Lists, Dicts... they are actually all objects of their
own classes. You use them so much and yet now you realise what they really are. Take a look at the code below:

[]    class str:
[]        def __init__(self, strg ):      #strg is the actual value of the obj: val = str('something')
[]            self.value=strg
[]
[]        def upper(self):
[]            low = ['a', 'b', 'c', ... 'z']
[]            upp = ['A', 'B', 'C', ... 'Z']
[]            re = ''
[]            for i in self.value:         #if this was 'strg', it would throw an error, cuz function 'upper()'
[]                if i in low:             #   takes to arg 'strg', use self.value instead.
[]                    re += upp[low.index(i)]
[]                else:
[]                    re += i
[]            return re
[]
[]        def __del__(self):
[]            pass

Above is most likely what the Python developers do when they created the built-in String class, and giving it functions.
And you, as a user creates String objects on-the-go and use its built-in functions, most likely:

[]    val = '123nick'
[]    name = str(val)               <-- Creating Objects/Instances
[]    name = name.upper()           <-- Using Object class functions
[]    print(name)

During programming, the moment you create different names for diff data like below:

[]    name = 'jonathan'
[]    alias = 'john'
[]    age = int(16)
[]    marital_status = bool(False)

You are creating lots of different objects, each of their own kind and with their own super powers. Take class str as an
example: above we have 'name' and 'alias', which both corresponds to the str class/type, but they are different objects actually.

As we go on into deeper programming, you'll see that the basic built-in classes do not really suit your needs all the time.
That's why there's so much Python modules like NumPy, BeautifulSoup... that contain lot's of unknown object classes that you
only mess with their functions without understanding what is going on in the background haha.

Now it's your turn to create and define your own classes and giving them super powers!

--------------------------------------------------------------------------------------------------------------------------
CREATING OBJECT CLASSES & METHODS

[]    class PartyAnimal:                            []
[]        x = 0                                     [] Creating the template of the object... ("x" & "name" are attributes, in other terms,
[]        name = ""                                 []           hidden values that are set by developers, not you.
[]        def __init__(self, z):                    [] OPTIONAL: Creating the constructor... self is neither a variable or parameter,
[]            self.name = z                         []           it's only used to refer to the object itself in which the method is called.
[]            print(self.name, "is constructed")    []           "z" is a parameter, parameters and variable "an" are different...
[]            print(self.x, "is constructed")       []           self.x is the syntax to look up the "x" attribute...
[]                                                  []            我 的x
[]        def party(self):                          [] Creating the methods/functions...
[]            self.x = self.x + 1                   []
[]            print("So far", self.x, self.name)    [] No need to iterate "self.name = z" cuz has been created by __init__()
[]                                      #z          []
[]        def __del__(self):                        [] OPTIONAL: Creating the destructor (seldom used)
[]            print("I am destructed", self.x)      []
[]                                                  []
[]    an = PartyAnimal("Sally")        #1           [] Creating an object... (i.e. apx = dict())
[]                                                  []
[]    an.party()                       #2           []
[]    an.party()                       #3           [] Using the objects with its functions/methods
[]    an.party()                       #4           []                       (i.e. apx.get("key", 0)
[]    an = 42                          #5           [] Reassign a new value to the variable "an"
[]    print("\"an\" contains", an)     #6           []
[]                                                  []
[]    im = PartyAnimal("Jim")          #7           [] Creating a new object of the same class...
[]    im.party()                       #8           []

=========================
Output:
>>> Sally is constructed         >1
>>> 0 is constructed

>>> So far 1 Sally               >2
>>> So far 2 Sally               >3
>>> So far 3 Sally               >4

>>> I am destructed 3            >5
>>> "an" contains 42             >6
...
>>> Jim is constructed           >7
>>> 0 is constructed
>>> So far 1 Jim                 >8
=========================

type(an): Shows the class of the "an" object
dir(an) : Lists all the methods and attributes of the "an" object
isinstance(obj, class)
    obj : The object that need to be checked as a part of class or not.
    class : Single class / Single type / (tuple of classes or types), against which object is needed to be checked.
    Returns : True, if object belongs to the given class/type if single class is passed or any
              of the classes/types if tuple of classes/types is passed, else returns False.
              Raises a TypeError if anything other than mentioned valid class type.

Contructors and Destructors are automatically called when the object is created, reassigned or after the program when
objects are then destroyed. __init__(), __del__()
Other automatic built-in functions include __iter__(), __next__()




--------------------------------------------------------------------------------------------------------------------------
// ~!INHERITANCE / SUBCLASS (animal -> bird, cat, dog...) Child class & methods can't be used unless parent class is used...
using the above pre-defined class...

[]    class FootballFan(PartyAnimal):
[]        points = 0
[]        def touchdown(self):
[]            self.points = self.points + 7
[]            self.party()
[]            print(self.name, "points", self.points)

#CODE==========================OUTPUT
[]    s = PartAnimal("Sally")        >>> Sally is constructed
[]                                   >>> 0 is constructed
[]    s.party()                      >>> So far 1 Sally
[]                                   ...
[]    j = FootballFan("Jim")         >>> Jim is constructed
[]                                   >>> 0 is constructed
[]    j.party()                      >>> So far 1 Jim
[]    j.touchdown()                  >>> So far 2 Jim     <-- inherited from .party()
[]                                   >>> Jim points 7     <-- defined in .touchdown()

---------------------------------------------------------------------------------------
*Inheritance can occur with 1 or more parent class: class child(parent1, parent2, ...):
---------------------------------------------------------------------------------------

In inheritance, if the child class does not have its OWN __init__() function, then it inherits or uses its parent class' __init__()
function. However, if you add an __init__() function to the child class itself, then it will ~!override the parent version of __init__().

[]    class FootballFan(PartyAnimal):
[]        def __init__(self, arg1, arg2):
[]            #overrides parent __init__() function

To keep the inheritance of the parent's __init__() function / properties given by it, you must call the parent's __init__() inside the child's __init__().

[]    class FootballFan(PartyAnimal):
[]        def __init__(self, arg1, arg2):
[]            PartyAnimal.__init__(self, arg1, arg2)
[]                ----or----
[]            super().__init__(arg1, arg2)
[]            ...do something else...

By using the ~!super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and
properties from its parent (one layer upwards). Note that you will also not need to put self in super().__init__()
*If new_class inherits two old_classes and calls super().__init__(), it'll run both old_classes' __init__(), sequence = class new_class(old1, old2):

See -> https://www.educative.io/edpresso/what-is-super-in-python

Also, if the child class has a function that has the same name as the parent class, then the child's version of the function will ~!override
the one of the parent class.

[]    class FootballFan(PartyAnimal):
[]        def party(self):
[]            #do something.




--------------------------------------------------------------------------------------------------------------------------
// ~!ITERATORS save time when building code and running them. __iter__(), __next__() are built-in functions. Just like
__init__() and __del__(), they run automatically.
NOTE: iter objs can only be iterated through ONCE.

__iter__()  : can do operations (i.e. init), but must always return the iterator object itself (i.e. return self)
__next__()  : can do operations, but must generate / return the next item in sequence.

=====ITERATOR PROTOCOL=====
The iter() function (which in turn calls the __iter__() method) is a python built-in function that returns an
iterator from them. You can opt to use iter(obj) or obj.__iter__(), they are simply the same thing. Its just
that __iter__() is a user-defined function and calling it will just do what the written code asks it to do.
On the other hand, calling the iter() function will in turn call the user-defined __iter__() function and run
the same code. However, iter() will also run a built-in 'type' checking, in which if the customised __iter__()
doesn't return an iterator object, it would throw an error.
*The same thing applies to next() & __next__().

Thus, iter(obj) ~= obj.__iter__()
      next(obj) ~= obj.__next__()

Note that __iter__() and __next__() must be defined by the user when creating a class if the object is intended
to be an iterator.
===========================

See iterator object as a list, a 'name' that contains multiple values that you can loop through.

[]    class MyNumbers:
[]      def __iter__(self):
[]        self.a = 1           <-- 'self' object's attributes
[]        return self
[]
[]      def __next__(self):
[]        self.a += 1
[]        return self.a -1
[]
[]    myclass = MyNumbers()
[]    myiter = iter(myclass)
[]
[]    print(next(myiter))  >>> 1
[]    print(next(myiter))  >>> 2
[]    print(next(myiter))  >>> 3
[]    print(next(myiter))  >>> 4
[]    print(next(myiter))  >>> 5

To prevent the iteration to go on forever, we can use the ~!StopIteration statement.
In the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:

[]    class MyNumbers:
[]      def __iter__(self):
[]        self.a = 1
[]        return self
[]
[]      def __next__(self):
[]        if self.a <= 20:
[]          self.a += 1         <-- Why not just return self.a+1 ? Take a look below at explanation section.
[]          return self.a -1
[]        else:
[]          raise StopIteration
[]
[]    myclass = MyNumbers()
[]    myiter = iter(myclass)   #alternative: myiter = myclass.__iter__()
[]
[]    for x in myiter:
[]      print(x)
[]    #>>> prints 1 to 20


=====Explanation=====
The next() method is also used during the first value of the iterator object. Why? Ask Developer.
Logic: __next__() runs when you call upon a / the next value in an iterator object.
*next(obj) ~= obj.__next__()

[]    listA = ['a','e','i','o','u']
[]    iter_listA = iter(listA)
[]    try:
[]        print( next(iter_listA)) >>> a
[]        print( next(iter_listA)) >>> e
[]        print( next(iter_listA)) >>> i
[]        print( next(iter_listA)) >>> o
[]        print( next(iter_listA)) >>> u
[]        print( next(iter_listA)) #StopIteration error
[]    except:
[]        pass



--------------------------------------------------------------------------------------------------------------------------
@classmethod
~!solve @classmethod @staticmethod https://www.geeksforgeeks.org/class-method-vs-static-method-python/
        @enumerate() https://careerkarma.com/blog/python-enumerate/
