#R is a language that is optimized for data analysation, and outputs a HTML source page that allows user to view the page using a Web Browser.
#You can also output the result by just calling the variable straight.
#Extension: filename.Rmd
Syntax:

' ' '{r}
#code goes here
#just like public class{ public static int method(){}}
#can have multiple blocks
' ' '

#data types: numerics, string""/char'', logical(TRUE/FALSE), Vectors/list(c("elem", ..)), NA(null)

#Operators are same as Java & Python: +_*/= > < >= <= == !=
#Logical Operators &:and, |:or, !:not

#alternate assignment syntaxes
var1 = 20
var2 <- 20


============================================================================================================================================ ~!Vectors
lisz = c("index1", "index2", "index3")    <-- c() combine method
sort(lisz)
length(lisz)
typeof(lisz)
lisz[2]
lisz_2 = unique(lisz)   <-- takes a vector argument and returns a vector with only the unique elements in that vector (removing all duplicates).


============================================================================================================================================ ~!if-else
if(x > 0) print("Non-negative number") else print("Negative number")

if (TRUE){
    #code
} else if (TRUE) {
    #code
} else {
    #code
}

y <- if(x > 0) 5 else 6


============================================================================================================================================ ~!common methods
print("Hello World")
class(45)        <-- checks class/data type
sum(num1, num2, num3, ..)
floor(num)
ceiling(num)
sqrt(num)
nrow(df/array/vector)
ncol(df/array/vector)


============================================================================================================================================ ~!Pipelining H[G(f(x))]
The pipe operator, or %>%, helps increase the readability of data frame code by piping the value on its left into
the first argument of the function that follows it. For example:

[]    df %>%
[]      head()

pipes the data frame df into the first argument of head(), becoming

[]    head(df)

The true power of pipes comes from the ability to link multiple function calls together.
In Brief: summary(select(df, -lat, -lon))

[]    artists = artists %>%
[]      select(-country, -year_founded, -albums) %>%
[]      head() %>%
[]      filter(spotify_monthly_listeners>20000000, genre!='Hip Hop') %>%
[]      head() %>%
[]      arrange(desc(youtube_subscribers)) %>%
[]      head()


============================================================================================================================================ ~!installing packages
[]    install.packages("package_name")
[]    install.packages(c("pack1", "pack2", ..))


============================================================================================================================================ ~!importing packages !!! no ''/""
[]    library(package_name)


============================================================================================================================================ ~!dplyr / readr
 dplyr provides functions that solve many challenges that arise when organizing tabular data
   - select columns of a table
   - filter rows of a table
   - arrange rows of a table in order

A data frame/tibble is an R object that stores tabular data in a table structure made up of rows and columns.
While data frames can be created in R, they are usually imported with data from a CSV, an Excel spreadsheet, or a SQL query.

#======== .CSV
# CSV (comma separated values) is a text-only spreadsheet format. Example:
# column1,column2,column3  <--will be title
# value1,value2,value3
# value4,value5,value6

#======== readr
[]    df = read_csv('file.csv')   <--df: data frame object
[]    write_csv(df, "location.csv")  <-- pass in df

#======== dplyr
# Each of the dplyr functions you will explore takes a data frame as its first argument.
[]    head(df, n)   <-- displays first n rows of data, default 6, optional n
[]    summary(df)   <-- MIN, Q1, Median, Mean, Q3, MAX for each numeric column,
[]                      length, Class, mode for non-numerics
[]
[]    Df = select(df, wanted_column1, wanted_colum2, ...)  <-- returns new df with selected cols only
[]         select(df, -to_remove1, -to_remove2, ...)       <-- returns new df with selected cols rmvd
[]    Df = filter(df, conditions)                          <-- returns new df with rows that fulfill condition (> >= < <= == !=)
[]         filter(df, first_name=='LimJiaYu' & age>25)
[]         filter(df, first_name=='LimJiaYu' | age>25)
[]         filter(df, !(first_name=='LimJiaYu'))
[]    Df = arrange(df, col_name)                           <-- returns new df arr asc according to col_name
[]         arrange(df, desc(col_name))                     <-- returns new df arr desc according to col_name
[]    Df = mutate(df, NewCol1=Val/Exp, NewCol2=Val/Exp, ..)       <-- retuns a new df with added col & values evaluated
[]         dogs = dogs %>%
[]           mutate(avg_height = ((height_low_inches+height_high_inches)/2))
[]    Df = transmute(df, NewCol1=Val/Exp,.. , OldCol=OldCol)      <-- returns a new df with ONLY the specified cols
[]    Df = rename(df, newcolname1=oldname1, newcolname2=oldname2, ..)   <-- returns a new df with renamed columns
[]    Vc = names(df)       <-- returns a vector containing all col names of df
[]    Vc = colnames(df)    <-/

#======== Read from Multiple Files
[]    Vc <- list.files(pattern = "file_.*csv")
[]    df_list <- lapply(Vc,read_csv)
[]    df <- bind_rows(df_list)

The first line uses list.files() and a regular expression, a sequence of characters describing a pattern of text
that should be matched, to find any file in the current directory that starts with 'file_' and has an extension
of csv, storing the name of each file in a vector files.
The second line uses lapply() to read each file in files into a data frame with read_csv(), storing the data frames in df_list
The third line then concatenates all of those data frames together with dplyrâ€™s bind_rows() function
